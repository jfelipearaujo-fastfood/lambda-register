// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	entities "github.com/jsfelipearaujo/lambda-register/src/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

// CheckIfCPFIsInUse provides a mock function with given fields: cpf
func (_m *MockDatabase) CheckIfCPFIsInUse(cpf string) (bool, error) {
	ret := _m.Called(cpf)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfCPFIsInUse")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(cpf)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(cpf)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersistUser provides a mock function with given fields: user
func (_m *MockDatabase) PersistUser(user entities.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for PersistUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
