// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	events "github.com/aws/aws-lambda-go/events"

	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

// CrateUser provides a mock function with given fields: req
func (_m *MockHandler) CrateUser(req events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CrateUser")
	}

	var r0 events.APIGatewayProxyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(events.APIGatewayProxyRequest) events.APIGatewayProxyResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(events.APIGatewayProxyResponse)
	}

	if rf, ok := ret.Get(1).(func(events.APIGatewayProxyRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
